{"version":3,"file":"static/js/9.ad68dce6.chunk.js","mappings":"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","sources":["components/ErrorFormText/ErrorFormTextStyle.styled.ts","components/RegistrationLoginForm/RegistrationLoginFormStyle.styled.ts","components/RegistrationLoginForm/RegistrationLoginForm.tsx","pages/RegistrationPage.tsx","pages/pageStyles/RegistrationLoginPageStyle.styled.ts"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n","import styled from \"styled-components\";\nimport { Form } from \"formik\";\n\nexport const RegistrationLoginFormStyle = styled(Form)`\n  border: 1px solid black;\n  border-radius: 20px;\n  max-height: 500px;\n  min-height: 200px;\n  padding-top: 40px;\n  padding-bottom: 20px;\n  row-gap: 40px;\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  /* max-width: 95%; */\n  margin-left: auto;\n  margin-right: auto;\n  background-color: rgba(209, 188, 138, 0.7);\n  /* label {\n    display: flex;\n    flex-direction: column;\n    row-gap: 10px;\n    align-items: center;\n  } */\n  .label-container {\n    width: 180px;\n    margin-left: auto;\n    margin-right: auto;\n    position: relative;\n    display: inline-block;\n  }\n\n  label {\n    position: absolute;\n    left: 8px;\n    bottom: 50%;\n    transition: 250ms linear;\n    transform: translate(0, 50%);\n    font-size: 14px;\n    color: blue;\n  }\n\n  input:focus + label {\n    transform: translateY(-100%);\n  }\n\n  input:not(:placeholder-shown) + label {\n    transform: translateY(-100%);\n  }\n\n  input {\n    border-radius: 8px;\n    padding-left: 10px;\n    height: 20px;\n  }\n\n  input::placeholder {\n    opacity: 0;\n  }\n\n  button {\n    margin-left: auto;\n    margin-right: auto;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 8px;\n    padding: 8px 12px;\n    background-color: blue;\n    color: white;\n    transition: 250ms linear;\n    column-gap: 8px;\n  }\n\n  button:hover,\n  button:focus {\n    background-color: tomato;\n  }\n\n  button[disabled] {\n    background-color: gray;\n  }\n`;\n","import { useLocation } from \"react-router-dom\";\nimport { PiSpinnerGap } from \"react-icons/pi\";\nimport { MdAppRegistration } from \"react-icons/md\";\nimport { BiLogIn } from \"react-icons/bi\";\nimport { RegistrationLoginFormStyle } from \"./RegistrationLoginFormStyle.styled\";\nimport { useRegisterMutation, useLogInMutation } from \"redux/baseApi\";\nimport { toastSuccess, toastError } from \"toastNotification/toastNotification\";\nimport * as yup from \"yup\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { ErrorText } from \"components/ErrorFormText/ErrorFormTextStyle.styled\";\n\ninterface IInitialLoginValues {\n  email: string;\n  password: string;\n}\n\ninterface IInitialRegisterValues extends IInitialLoginValues {\n  name: string;\n}\n\nconst initialRegisterValues: IInitialRegisterValues = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nconst initialLoginValues: IInitialLoginValues = {\n  email: \"\",\n  password: \"\",\n};\n\nconst schemaRegister = yup.object().shape({\n  name: yup\n    .string()\n    .min(6, \"Field name must be 6 symbols minimum\")\n    .max(16, \"Field name must be 16 symbols maximum\")\n    .required(\"Field name is required\"),\n\n  email: yup.string().email().required(\"Field email is required\"),\n  password: yup\n    .string()\n    .min(7, \"Password must be 7 symbols minimum\")\n    .max(16, \"Password must be 16 symbols maximum\")\n    .required(\"Field password is required\"),\n});\n\nconst schemaLogin = yup.object().shape({\n  email: yup.string().email().required(\"Field email is required\"),\n\n  password: yup\n    .string()\n    .min(7, \"Field password must be 7 symbols minimum\")\n    .max(16, \"Field password must be 16 symbols minimum\")\n    .required(\"Field password is required\"),\n});\n\nconst RegistrationLoginForm = () => {\n  const location = useLocation();\n  const [registration, { isLoading: isRegisterLoading }] =\n    useRegisterMutation();\n  const [logIn, { isLoading: isLoginLoading }] = useLogInMutation();\n\n  const isLoginPage = location.pathname === \"/login\";\n\n  const handleSubmit = async ({ name, email, password }) => {\n    if (isLoginPage) {\n      try {\n        await logIn({ password, email }).unwrap();\n\n        toastSuccess(\"Log in successful. Welcome back to your phone book\");\n      } catch {\n        toastError(\n          \"Not valid email or password. Please, try again or register new account\"\n        );\n      }\n    } else {\n      try {\n        await registration({ name, email, password }).unwrap();\n        toastSuccess(\"Registration successful. Welcome to phone book\");\n      } catch {\n        toastError(\"Something went wrong. Please, try again\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <h2>\n        {isLoginPage ? (\n          <span className=\"first\">Login </span>\n        ) : (\n          <span className=\"first\">Registration </span>\n        )}\n        Page\n      </h2>\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={isLoginPage ? initialLoginValues : initialRegisterValues}\n        validationSchema={isLoginPage ? schemaLogin : schemaRegister}\n      >\n        <RegistrationLoginFormStyle autoComplete=\"off\">\n          {!isLoginPage && (\n            <div className=\"label-container\">\n              <Field placeholder=\"Name\" id=\"name\" type=\"text\" name=\"name\" />\n              <label htmlFor=\"name\">Name</label>\n            </div>\n          )}\n          <div className=\"label-container\">\n            <Field placeholder=\"Email\" id=\"email\" type=\"email\" name=\"email\" />\n            <label htmlFor=\"email\">Email</label>\n          </div>\n          <div className=\"label-container\">\n            <Field\n              placeholder=\"Password\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n            />\n            <label htmlFor=\"password\">Password</label>\n          </div>\n          <button type=\"submit\">\n            {isRegisterLoading || isLoginLoading ? (\n              <PiSpinnerGap className=\"spinner\" size={16} />\n            ) : isLoginPage ? (\n              <BiLogIn size={16} />\n            ) : (\n              <MdAppRegistration size={16} />\n            )}\n            {isLoginPage ? `Login` : `Registration`}\n          </button>\n          {isLoginPage ? null : (\n            <ErrorMessage\n              name=\"name\"\n              component=\"div\"\n              render={message => <ErrorText>{message}</ErrorText>}\n            />\n          )}\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n          <ErrorMessage\n            name=\"password\"\n            component=\"div\"\n            render={message => <ErrorText>{message}</ErrorText>}\n          />\n        </RegistrationLoginFormStyle>\n      </Formik>\n    </>\n  );\n};\n\nexport default RegistrationLoginForm;\n","import Container from \"components/Container/Container\";\nimport RegistrationLoginForm from \"components/RegistrationLoginForm/RegistrationLoginForm\";\nimport { RegistrationLoginPageStyle } from \"./pageStyles/RegistrationLoginPageStyle.styled\";\n\nconst RegistrationPage = () => {\n  return (\n    <RegistrationLoginPageStyle>\n      <Container>\n        <RegistrationLoginForm />\n      </Container>\n    </RegistrationLoginPageStyle>\n  );\n};\n\nexport default RegistrationPage;\n","import styled from \"styled-components\";\n\nexport const RegistrationLoginPageStyle = styled.section`\n  text-align: center;\n  padding-top: 50px;\n\n  .first {\n    color: blue;\n  }\n  h2 {\n    margin-bottom: 20px;\n  }\n`;\n"],"names":["ErrorText","styled","p","_templateObject","_taggedTemplateLiteral","RegistrationLoginFormStyle","Form","initialRegisterValues","name","email","password","initialLoginValues","schemaRegister","yup","shape","min","max","required","schemaLogin","RegistrationLoginForm","location","useLocation","registration","isLoading","isRegisterLoading","useRegisterMutation","logIn","isLoginLoading","useLogInMutation","isLoginPage","pathname","_jsxs","_Fragment","children","_jsx","className","Formik","onSubmit","async","_ref","unwrap","toastSuccess","toastError","initialValues","validationSchema","autoComplete","Field","placeholder","id","type","htmlFor","PiSpinnerGap","size","BiLogIn","MdAppRegistration","ErrorMessage","component","render","message","RegistrationPage","RegistrationLoginPageStyle","Container","section"],"sourceRoot":""}